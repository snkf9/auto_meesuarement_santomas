import { uWave } from '..';
import { HistoryEntry, Playback, VoteDirections } from '../types/entities';
import { PaginatedHistoryEntries } from '../types/domain';
export default class Booth {
    private uw;
    static VoteDirections: typeof VoteDirections;
    static HISTORY_ENTRY_DATE_FIELDS: string[];
    constructor(uw: uWave);
    getBooth(): Promise<HistoryEntry | null>;
    getHistory(media?: string, offset?: number, limit?: number): Promise<PaginatedHistoryEntries>;
    getVote(historyId: string): Promise<VoteDirections>;
    vote(historyId: string, direction: VoteDirections.UPVOTE | VoteDirections.DOWNVOTE): Promise<null>;
    favorite(playlistID: string, historyID: string): Promise<{
        item: Playback;
        playlistSize: number;
    }>;
    skip(remove?: boolean): Promise<null>;
    skip(remove: boolean, userID: string, reason: string): Promise<null>;
    replaceBooth(userID: string): Promise<null>;
}
