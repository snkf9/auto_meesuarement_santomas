/// <reference types="node" />
import { EventEmitter } from 'events';
import { PrivateSocketTokenRef, uWave } from '..';
import { Commands, SocketPayloadsMap } from '../types';
export default class Socket {
    private uw;
    private socket?;
    private emitter;
    static KEEP_ALIVE_MESSAGE: string;
    constructor(uw: uWave, tokenRef: PrivateSocketTokenRef);
    get isConnected(): boolean;
    once<E extends Commands>(eventName: E, listener: (payload: SocketPayloadsMap[E]) => void): EventEmitter;
    on<E extends Commands>(eventName: E, listener: (payload: SocketPayloadsMap[E]) => void): EventEmitter;
    off<E extends Commands>(eventName: E, listener: (payload: SocketPayloadsMap[E]) => void): EventEmitter;
    connect(): void;
    disconnect(): void;
    emit<E extends Commands>(command: E, payload?: SocketPayloadsMap[E]): boolean;
    send<I>(message: I): void;
    private connectSocket;
    private onSocketOpen;
    private onSocketClose;
    private onSocketError;
    private onSocketMessage;
}
