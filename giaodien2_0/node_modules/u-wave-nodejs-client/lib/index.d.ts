import { Auth, Booth, Chat, Socket } from './modules';
export interface IUWaveOptions {
    apiBaseUrl: string;
    wsConnectionString: string;
    authImmediately?: boolean;
    credentials?: {
        email: string;
        password: string;
    };
}
export declare type PrivateSocketTokenRef = {
    token?: string;
};
export declare class uWave {
    private jwt?;
    options: IUWaveOptions;
    private modules;
    constructor(options: IUWaveOptions);
    get auth(): Auth;
    get socket(): Socket;
    get booth(): Booth;
    get chat(): Chat;
    get isAuthenticated(): boolean;
    request<I extends {}, R extends {}>(method: 'get' | 'post' | 'put' | 'patch' | 'delete', endpoint: string, data?: I): Promise<R>;
    get<I, R>(endpoint: string, query?: I): Promise<R>;
    post<I, R>(endpoint: string, data?: I): Promise<R>;
    put<I, R>(endpoint: string, data?: I): Promise<R>;
    patch<I, R>(endpoint: string, data?: I): Promise<R>;
    delete<I, R>(endpoint: string, query?: I): Promise<R>;
}
